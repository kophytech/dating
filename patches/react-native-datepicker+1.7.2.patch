diff --git a/node_modules/react-native-datepicker/datepicker.js b/node_modules/react-native-datepicker/datepicker.js
index ac6cacd..ef52208 100644
--- a/node_modules/react-native-datepicker/datepicker.js
+++ b/node_modules/react-native-datepicker/datepicker.js
@@ -6,23 +6,31 @@ import {
   Image,
   Modal,
   TouchableHighlight,
-  DatePickerAndroid,
-  TimePickerAndroid,
-  DatePickerIOS,
   Platform,
   Animated,
-  Keyboard
+  Keyboard,
 } from 'react-native';
 import Style from './style';
 import Moment from 'moment';
+import {
+  DatePickerAndroid,
+  TimePickerAndroid,
+  DatePickerIOS,
+} from '@react-native-community/datetimepicker';
 
 const FORMATS = {
-  'date': 'YYYY-MM-DD',
-  'datetime': 'YYYY-MM-DD HH:mm',
-  'time': 'HH:mm'
+  date: 'YYYY-MM-DD',
+  datetime: 'YYYY-MM-DD HH:mm',
+  time: 'HH:mm',
 };
 
-const SUPPORTED_ORIENTATIONS = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];
+const SUPPORTED_ORIENTATIONS = [
+  'portrait',
+  'portrait-upside-down',
+  'landscape',
+  'landscape-left',
+  'landscape-right',
+];
 
 class DatePicker extends Component {
   constructor(props) {
@@ -32,7 +40,7 @@ class DatePicker extends Component {
       date: this.getDate(),
       modalVisible: false,
       animatedHeight: new Animated.Value(0),
-      allowPointerEvents: true
+      allowPointerEvents: true,
     };
 
     this.getDate = this.getDate.bind(this);
@@ -62,21 +70,15 @@ class DatePicker extends Component {
     // slide animation
     if (visible) {
       this.setState({modalVisible: visible});
-      return Animated.timing(
-        this.state.animatedHeight,
-        {
-          toValue: height,
-          duration: duration
-        }
-      ).start();
+      return Animated.timing(this.state.animatedHeight, {
+        toValue: height,
+        duration: duration,
+      }).start();
     } else {
-      return Animated.timing(
-        this.state.animatedHeight,
-        {
-          toValue: 0,
-          duration: duration
-        }
-      ).start(() => {
+      return Animated.timing(this.state.animatedHeight, {
+        toValue: 0,
+        duration: duration,
+      }).start(() => {
         this.setState({modalVisible: visible});
       });
     }
@@ -150,9 +152,7 @@ class DatePicker extends Component {
   getDateStr(date = this.props.date) {
     const {mode, format = FORMATS[mode]} = this.props;
 
-    const dateInstance = date instanceof Date
-      ? date
-      : this.getDate(date);
+    const dateInstance = date instanceof Date ? date : this.getDate(date);
 
     if (typeof this.props.getDateStr === 'function') {
       return this.props.getDateStr(dateInstance);
@@ -163,7 +163,10 @@ class DatePicker extends Component {
 
   datePicked() {
     if (typeof this.props.onDateChange === 'function') {
-      this.props.onDateChange(this.getDateStr(this.state.date), this.state.date);
+      this.props.onDateChange(
+        this.getDateStr(this.state.date),
+        this.state.date,
+      );
     }
   }
 
@@ -172,13 +175,19 @@ class DatePicker extends Component {
 
     if (!date && placeholder) {
       return (
-        <Text allowFontScaling={allowFontScaling} style={[Style.placeholderText, customStyles.placeholderText]}>
+        <Text
+          allowFontScaling={allowFontScaling}
+          style={[Style.placeholderText, customStyles.placeholderText]}
+        >
           {placeholder}
         </Text>
       );
     }
     return (
-      <Text allowFontScaling={allowFontScaling} style={[Style.dateText, customStyles.dateText]}>
+      <Text
+        allowFontScaling={allowFontScaling}
+        style={[Style.dateText, customStyles.dateText]}
+      >
         {this.getDateStr()}
       </Text>
     );
@@ -187,11 +196,11 @@ class DatePicker extends Component {
   onDateChange(date) {
     this.setState({
       allowPointerEvents: false,
-      date: date
+      date: date,
     });
     const timeoutId = setTimeout(() => {
       this.setState({
-        allowPointerEvents: true
+        allowPointerEvents: true,
       });
       clearTimeout(timeoutId);
     }, 200);
@@ -200,7 +209,7 @@ class DatePicker extends Component {
   onDatePicked({action, year, month, day}) {
     if (action !== DatePickerAndroid.dismissedAction) {
       this.setState({
-        date: new Date(year, month, day)
+        date: new Date(year, month, day),
       });
       this.datePicked();
     } else {
@@ -211,7 +220,7 @@ class DatePicker extends Component {
   onTimePicked({action, hour, minute}) {
     if (action !== DatePickerAndroid.dismissedAction) {
       this.setState({
-        date: Moment().hour(hour).minute(minute).toDate()
+        date: Moment().hour(hour).minute(minute).toDate(),
       });
       this.datePicked();
     } else {
@@ -220,7 +229,12 @@ class DatePicker extends Component {
   }
 
   onDatetimePicked({action, year, month, day}) {
-    const {mode, androidMode, format = FORMATS[mode], is24Hour = !format.match(/h|a/)} = this.props;
+    const {
+      mode,
+      androidMode,
+      format = FORMATS[mode],
+      is24Hour = !format.match(/h|a/),
+    } = this.props;
 
     if (action !== DatePickerAndroid.dismissedAction) {
       let timeMoment = Moment(this.state.date);
@@ -229,7 +243,7 @@ class DatePicker extends Component {
         hour: timeMoment.hour(),
         minute: timeMoment.minutes(),
         is24Hour: is24Hour,
-        mode: androidMode
+        mode: androidMode,
       }).then(this.onDatetimeTimePicked.bind(this, year, month, day));
     } else {
       this.onPressCancel();
@@ -239,7 +253,7 @@ class DatePicker extends Component {
   onDatetimeTimePicked(year, month, day, {action, hour, minute}) {
     if (action !== DatePickerAndroid.dismissedAction) {
       this.setState({
-        date: new Date(year, month, day, hour, minute)
+        date: new Date(year, month, day, hour, minute),
       });
       this.datePicked();
     } else {
@@ -256,14 +270,20 @@ class DatePicker extends Component {
 
     // reset state
     this.setState({
-      date: this.getDate()
+      date: this.getDate(),
     });
 
     if (Platform.OS === 'ios') {
       this.setModalVisible(true);
     } else {
-
-      const {mode, androidMode, format = FORMATS[mode], minDate, maxDate, is24Hour = !format.match(/h|a/)} = this.props;
+      const {
+        mode,
+        androidMode,
+        format = FORMATS[mode],
+        minDate,
+        maxDate,
+        is24Hour = !format.match(/h|a/),
+      } = this.props;
 
       // 选日期
       if (mode === 'date') {
@@ -271,7 +291,7 @@ class DatePicker extends Component {
           date: this.state.date,
           minDate: minDate && this.getDate(minDate),
           maxDate: maxDate && this.getDate(maxDate),
-          mode: androidMode
+          mode: androidMode,
         }).then(this.onDatePicked);
       } else if (mode === 'time') {
         // 选时间
@@ -282,7 +302,7 @@ class DatePicker extends Component {
           hour: timeMoment.hour(),
           minute: timeMoment.minutes(),
           is24Hour: is24Hour,
-          mode: androidMode
+          mode: androidMode,
         }).then(this.onTimePicked);
       } else if (mode === 'datetime') {
         // 选日期和时间
@@ -291,7 +311,7 @@ class DatePicker extends Component {
           date: this.state.date,
           minDate: minDate && this.getDate(minDate),
           maxDate: maxDate && this.getDate(maxDate),
-          mode: androidMode
+          mode: androidMode,
         }).then(this.onDatetimePicked);
       }
     }
@@ -302,12 +322,7 @@ class DatePicker extends Component {
   }
 
   _renderIcon() {
-    const {
-      showIcon,
-      iconSource,
-      iconComponent,
-      customStyles
-    } = this.props;
+    const {showIcon, iconSource, iconComponent, customStyles} = this.props;
 
     if (showIcon) {
       if (iconComponent) {
@@ -341,13 +356,14 @@ class DatePicker extends Component {
       cancelBtnTestID,
       confirmBtnTestID,
       allowFontScaling,
-      locale
+      locale,
     } = this.props;
 
     const dateInputStyle = [
-      Style.dateInput, customStyles.dateInput,
+      Style.dateInput,
+      customStyles.dateInput,
       disabled && Style.disabled,
-      disabled && customStyles.disabled
+      disabled && customStyles.disabled,
     ];
 
     return (
@@ -358,81 +374,105 @@ class DatePicker extends Component {
         testID={testID}
       >
         <View style={[Style.dateTouchBody, customStyles.dateTouchBody]}>
-          {
-            !this.props.hideText ?
-              <View style={dateInputStyle}>
-                {this.getTitleElement()}
-              </View>
-            :
-              <View/>
-          }
+          {!this.props.hideText ? (
+            <View style={dateInputStyle}>{this.getTitleElement()}</View>
+          ) : (
+            <View />
+          )}
           {this._renderIcon()}
-          {Platform.OS === 'ios' && <Modal
-            transparent={true}
-            animationType="none"
-            visible={this.state.modalVisible}
-            supportedOrientations={SUPPORTED_ORIENTATIONS}
-            onRequestClose={() => {this.setModalVisible(false);}}
-          >
-            <View
-              style={{flex: 1}}
+          {Platform.OS === 'ios' && (
+            <Modal
+              transparent={true}
+              animationType="none"
+              visible={this.state.modalVisible}
+              supportedOrientations={SUPPORTED_ORIENTATIONS}
+              onRequestClose={() => {
+                this.setModalVisible(false);
+              }}
             >
-              <TouchableComponent
-                style={Style.datePickerMask}
-                activeOpacity={1}
-                underlayColor={'#00000077'}
-                onPress={this.onPressMask}
-              >
+              <View style={{flex: 1}}>
                 <TouchableComponent
-                  underlayColor={'#fff'}
-                  style={{flex: 1}}
+                  style={Style.datePickerMask}
+                  activeOpacity={1}
+                  underlayColor={'#00000077'}
+                  onPress={this.onPressMask}
                 >
-                  <Animated.View
-                    style={[Style.datePickerCon, {height: this.state.animatedHeight}, customStyles.datePickerCon]}
-                  >
-                    <View pointerEvents={this.state.allowPointerEvents ? 'auto' : 'none'}>
-                      <DatePickerIOS
-                        date={this.state.date}
-                        mode={mode}
-                        minimumDate={minDate && this.getDate(minDate)}
-                        maximumDate={maxDate && this.getDate(maxDate)}
-                        onDateChange={this.onDateChange}
-                        minuteInterval={minuteInterval}
-                        timeZoneOffsetInMinutes={timeZoneOffsetInMinutes ? timeZoneOffsetInMinutes : null}
-                        style={[Style.datePicker, customStyles.datePicker]}
-                        locale={locale}
-                      />
-                    </View>
-                    <TouchableComponent
-                      underlayColor={'transparent'}
-                      onPress={this.onPressCancel}
-                      style={[Style.btnText, Style.btnCancel, customStyles.btnCancel]}
-                      testID={cancelBtnTestID}
+                  <TouchableComponent underlayColor={'#fff'} style={{flex: 1}}>
+                    <Animated.View
+                      style={[
+                        Style.datePickerCon,
+                        {height: this.state.animatedHeight},
+                        customStyles.datePickerCon,
+                      ]}
                     >
-                      <Text
-                        allowFontScaling={allowFontScaling}
-                        style={[Style.btnTextText, Style.btnTextCancel, customStyles.btnTextCancel]}
+                      <View
+                        pointerEvents={
+                          this.state.allowPointerEvents ? 'auto' : 'none'
+                        }
                       >
-                        {cancelBtnText}
-                      </Text>
-                    </TouchableComponent>
-                    <TouchableComponent
-                      underlayColor={'transparent'}
-                      onPress={this.onPressConfirm}
-                      style={[Style.btnText, Style.btnConfirm, customStyles.btnConfirm]}
-                      testID={confirmBtnTestID}
-                    >
-                      <Text allowFontScaling={allowFontScaling}
-                            style={[Style.btnTextText, customStyles.btnTextConfirm]}
+                        <DatePickerIOS
+                          date={this.state.date}
+                          mode={mode}
+                          minimumDate={minDate && this.getDate(minDate)}
+                          maximumDate={maxDate && this.getDate(maxDate)}
+                          onDateChange={this.onDateChange}
+                          minuteInterval={minuteInterval}
+                          timeZoneOffsetInMinutes={
+                            timeZoneOffsetInMinutes
+                              ? timeZoneOffsetInMinutes
+                              : null
+                          }
+                          style={[Style.datePicker, customStyles.datePicker]}
+                          locale={locale}
+                        />
+                      </View>
+                      <TouchableComponent
+                        underlayColor={'transparent'}
+                        onPress={this.onPressCancel}
+                        style={[
+                          Style.btnText,
+                          Style.btnCancel,
+                          customStyles.btnCancel,
+                        ]}
+                        testID={cancelBtnTestID}
                       >
-                        {confirmBtnText}
-                      </Text>
-                    </TouchableComponent>
-                  </Animated.View>
+                        <Text
+                          allowFontScaling={allowFontScaling}
+                          style={[
+                            Style.btnTextText,
+                            Style.btnTextCancel,
+                            customStyles.btnTextCancel,
+                          ]}
+                        >
+                          {cancelBtnText}
+                        </Text>
+                      </TouchableComponent>
+                      <TouchableComponent
+                        underlayColor={'transparent'}
+                        onPress={this.onPressConfirm}
+                        style={[
+                          Style.btnText,
+                          Style.btnConfirm,
+                          customStyles.btnConfirm,
+                        ]}
+                        testID={confirmBtnTestID}
+                      >
+                        <Text
+                          allowFontScaling={allowFontScaling}
+                          style={[
+                            Style.btnTextText,
+                            customStyles.btnTextConfirm,
+                          ]}
+                        >
+                          {confirmBtnText}
+                        </Text>
+                      </TouchableComponent>
+                    </Animated.View>
+                  </TouchableComponent>
                 </TouchableComponent>
-              </TouchableComponent>
-            </View>
-          </Modal>}
+              </View>
+            </Modal>
+          )}
         </View>
       </TouchableComponent>
     );
@@ -460,13 +500,17 @@ DatePicker.defaultProps = {
   hideText: false,
   placeholder: '',
   TouchableComponent: TouchableHighlight,
-  modalOnResponderTerminationRequest: e => true
+  modalOnResponderTerminationRequest: e => true,
 };
 
 DatePicker.propTypes = {
   mode: PropTypes.oneOf(['date', 'datetime', 'time']),
   androidMode: PropTypes.oneOf(['clock', 'calendar', 'spinner', 'default']),
-  date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.object]),
+  date: PropTypes.oneOfType([
+    PropTypes.string,
+    PropTypes.instanceOf(Date),
+    PropTypes.object,
+  ]),
   format: PropTypes.string,
   minDate: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
   maxDate: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
@@ -488,7 +532,7 @@ DatePicker.propTypes = {
   modalOnResponderTerminationRequest: PropTypes.func,
   is24Hour: PropTypes.bool,
   getDateStr: PropTypes.func,
-  locale: PropTypes.string
+  locale: PropTypes.string,
 };
 
 export default DatePicker;
